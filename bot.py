import os
import json
import datetime
import requests
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

# =========================
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
# =========================
TELEGRAM_TOKEN = os.environ.get("TELEGRAM_TOKEN")
WEBHOOK_URL = os.environ.get("WEBHOOK_URL")
PORT = int(os.environ.get("PORT", 8443))

# =========================
# –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã
# =========================
try:
    with open("questions.json", "r", encoding="utf-8") as f:
        questions = json.load(f)
except FileNotFoundError:
    print("–û—à–∏–±–∫–∞: —Ñ–∞–π–ª questions.json –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    questions = []
except json.JSONDecodeError:
    print("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç questions.json!")
    questions = []

# =========================
# /start
# =========================
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not questions:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –≤–æ–ø—Ä–æ—Å—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
        return
        
    categories = sorted({q["category"] for q in questions})
    keyboard = [[InlineKeyboardButton(cat, callback_data=f"cat|{cat}")] for cat in categories]
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=InlineKeyboardMarkup(keyboard))

# =========================
# –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
# =========================
async def on_category(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    category = query.data.split("|")[1]
    items = [q for q in questions if q["category"] == category]
    
    if not items:
        await query.edit_message_text("‚ùå –í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤!")
        return
        
    context.user_data["current"] = {"items": items, "index": 0}
    await show_question(query, items[0])

# =========================
# –ü–æ–∫–∞–∑ –≤–æ–ø—Ä–æ—Å–∞
# =========================
async def show_question(query, q):
    text = f"üìã –í–æ–ø—Ä–æ—Å: {q['task']}"
    if q.get("code"):
        text += f"\n\nüíª –ö–æ–¥:\n<code>{q['code']}</code>"
    
    keyboard = [[
        InlineKeyboardButton("‚úÖ –î–∞", callback_data=f"ans|yes|{q['id']}"),
        InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data=f"ans|no|{q['id']}"),
        InlineKeyboardButton("üü° –ß–∞—Å—Ç–∏—á–Ω–æ", callback_data=f"ans|part|{q['id']}")
    ]]
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode="HTML")

# =========================
# –û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å (–∫–Ω–æ–ø–∫–∏)
# =========================
async def on_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    _, ans, qid = query.data.split("|")
    qid = int(qid)
    
    try:
        q = next(x for x in questions if x["id"] == qid)
    except StopIteration:
        await query.edit_message_text("‚ùå –í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
        
    user_id = update.effective_user.id

    if ans in ("no", "part"):
        # –∂–¥—ë–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        context.user_data["pending"] = {
            "question": q,
            "answer": "–ù–µ—Ç" if ans == "no" else "–ß–∞—Å—Ç–∏—á–Ω–æ",
            "user_id": user_id
        }
        await query.edit_message_text(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏ ¬´{'–ù–µ—Ç' if ans == 'no' else '–ß–∞—Å—Ç–∏—á–Ω–æ'}¬ª. \n"
            "üìù –í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º:"
        )
        return

    # –ï—Å–ª–∏ "–î–∞" ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ä–∞–∑—É
    await send_to_webhook(user_id, q, "–î–∞", "")
    await go_next_question(query, context)

# =========================
# –ü—Ä–∏—ë–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
# =========================
async def on_comment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if "pending" not in context.user_data:
        await update.message.reply_text("‚ùå –ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
        return

    pending = context.user_data.pop("pending")
    q = pending["question"]
    user_id = pending["user_id"]
    comment_text = update.message.text.strip()
    
    if not comment_text:
        await update.message.reply_text("‚ùå –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        context.user_data["pending"] = pending  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
        return
        
    await send_to_webhook(user_id, q, pending["answer"], comment_text)
    await update.message.reply_text("‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–æ—Ö—Ä–∞–Ω—ë–Ω")
    await go_next_question(update.message, context)

# =========================
# –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
# =========================
async def go_next_question(message_or_query, context):
    current = context.user_data.get("current", {})
    items = current.get("items", [])
    idx = current.get("index", 0) + 1
    context.user_data["current"]["index"] = idx

    if idx < len(items):
        next_q = items[idx]
        if hasattr(message_or_query, "edit_message_text"):
            await show_question(message_or_query, next_q)
        else:
            text = f"üìã –í–æ–ø—Ä–æ—Å: {next_q['task']}"
            if next_q.get("code"):
                text += f"\n\nüíª –ö–æ–¥:\n<code>{next_q['code']}</code>"
                
            keyboard = [[
                InlineKeyboardButton("‚úÖ –î–∞", callback_data=f"ans|yes|{next_q['id']}"),
                InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data=f"ans|no|{next_q['id']}"),
                InlineKeyboardButton("üü° –ß–∞—Å—Ç–∏—á–Ω–æ", callback_data=f"ans|part|{next_q['id']}")
            ]]
            await message_or_query.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode="HTML")
    else:
        if hasattr(message_or_query, "reply_text"):
            await message_or_query.reply_text("üéâ –ß–µ–∫-–ª–∏—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω! –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!")
        else:
            await message_or_query.edit_message_text("üéâ –ß–µ–∫-–ª–∏—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω! –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!")
        context.user_data.pop("current", None)

# =========================
# –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Google Apps Script
# =========================
async def send_to_webhook(user_id, q, answer, comment):
    payload = {
        "timestamp": datetime.datetime.utcnow().isoformat(),
        "user_id": str(user_id),
        "category": q["category"],
        "task": q["task"],
        "answer": answer,
        "code": q.get("code", ""),
        "comment": comment
    }
    try:
        response = requests.post(WEBHOOK_URL, json=payload, timeout=10)
        if response.status_code != 200:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: —Å—Ç–∞—Ç—É—Å {response.status_code}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")

# =========================
# –ö–æ–º–∞–Ω–¥–∞ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã
# =========================
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if "pending" in context.user_data:
        context.user_data.pop("pending")
    if "current" in context.user_data:
        context.user_data.pop("current")
    await update.message.reply_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")

# =========================
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
# =========================
async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print(f"–û—à–∏–±–∫–∞: {context.error}")
    if update and update.effective_message:
        await update.effective_message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start")

# =========================
# –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫
# =========================
def main():
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if not TELEGRAM_TOKEN:
        print("‚ùå –û—à–∏–±–∫–∞: TELEGRAM_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        return
        
    if not WEBHOOK_URL:
        print("‚ùå –û—à–∏–±–∫–∞: WEBHOOK_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        return
        
    if not questions:
        print("‚ùå –û—à–∏–±–∫–∞: –≤–æ–ø—Ä–æ—Å—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
        return

    app = Application.builder().token(TELEGRAM_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("cancel", cancel))
    app.add_handler(CallbackQueryHandler(on_category, pattern="^cat\|"))
    app.add_handler(CallbackQueryHandler(on_answer, pattern="^ans\|"))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, on_comment))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    app.add_error_handler(error_handler)

    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {len(questions)}")
    
    try:
        # –ó–∞–ø—É—Å–∫ webhook
        app.run_webhook(
            listen="0.0.0.0",
            port=PORT,
            webhook_url=f"{WEBHOOK_URL}/{TELEGRAM_TOKEN}",
            drop_pending_updates=True
        )
        print("‚úÖ Webhook –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ webhook: {e}")
        print("üîÑ –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ polling...")
        app.run_polling()

if __name__ == "__main__":
    main()
